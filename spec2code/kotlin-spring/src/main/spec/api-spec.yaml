openapi: 3.1.0
info:
  title: Shelf Patrol API
  description: |-
    This defines the API of the Shelf Patrol backend based on the OpenAPI 3.1 specification.
    
    Shelf Patrol helps to index and search your bookshelf.
  version: 1.0.0
  contact:
    name: Shelf Patrol Team
    url: https://example.com/team
    email: support@example.com
  license:
    name: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
    identifier: CC-BY-NC-SA-4.0
servers:
  - url: http://localhost:7002
    description: Local development server
  - url: https://shelf-patrol.dofix.me
    description: Production server
tags:
  - name: Authors
    description: Create, read, update and delete authors.
  - name: Publishers
    description: Create, read, update and delete publishers.
  - name: Books
    description: |
      Create, read, update and delete books.
      Assign authors and publishers to books.
paths:
  /authors:
    get:
      tags:
        - Authors
      summary: Get list of authors
      description: Returns authors currently stored in the database.
      operationId: listAuthors
      parameters:
        - name: search
          in: query
          description: A search term to filter the list for authors by first name or last name.
          required: false
          schema:
            type: string
            examples:
              - John
              - Doe
      responses:
        200:
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
        - Authors
      summary: Create a new author
      description: |
        Creates an entry for an author in the database.
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthor'
      responses:
        201:
          description: The created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Problem400BadRequest'
  /authors/{authorId}:
    get:
      tags:
        - Authors
      summary: Get an author by ID
      description: Returns a single author from the database, identified by its unique ID.
      operationId: getAuthorById
      parameters:
        - name: authorId
          in: path
          description: The unique identifier of the author.
          required: true
          schema:
            type: string
            format: uuid
            example: "4a556026-4bbc-417c-b91e-52a2908cf8e5"
      responses:
        200:
          description: The author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/Problem400BadRequest'
        404:
          $ref: '#/components/responses/Problem404NotFound'
    put:
      tags:
        - Authors
      summary: Update an author
      description: >
        Updates an already existing author in the database, identified by its unique ID.
      operationId: updateAuthor
      parameters:
        - name: authorId
          in: path
          description: The unique identifier of the author.
          required: true
          schema:
            type: string
            format: uuid
            example: "4a556026-4bbc-417c-b91e-52a2908cf8e5"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthor'
      responses:
        204:
          description: Author updated
        400:
          $ref: '#/components/responses/Problem400BadRequest'
        404:
          $ref: '#/components/responses/Problem404NotFound'
    delete:
      tags:
        - Authors
      summary: Delete an author
      description: Deletes an author from the database, identified by its unique ID.
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: The unique identifier of the author.
          required: true
          schema:
            type: string
            format: uuid
            example: "4a556026-4bbc-417c-b91e-52a2908cf8e5"
      responses:
        204:
          description: Author deleted
        404:
          $ref: '#/components/responses/Problem404NotFound'
components:
  schemas:
    CreateAuthor:
      type: object
      properties:
        firstName:
          type: "string"
          description: "The first name of the author."
          example: "John"
        lastName:
          type: "string"
          description: "The last name of the author."
          example: "Doe"
      required:
        - firstName
        - lastName
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "A Universally Unique Identifier (UUID) to uniquely identify an author."
          example: "4a556026-4bbc-417c-b91e-52a2908cf8e5"
        firstName:
          type: "string"
          description: "The first name of the author."
          example: "John"
        lastName:
          type: "string"
          description: "The last name of the author."
          example: "Doe"
      required:
        - id
        - firstName
        - lastName
    Problem:
      required:
        - type
        - title
        - status
        - detail
      type: object
      properties:
        type:
          type: string
          example: 'about:blank'
        title:
          type: string
          example: 'Error class'
        status:
          type: integer
          example: 404
        detail:
          type: string
          example: 'Failure message.'
  responses:
    Problem400BadRequest:
      description: |
        The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax).
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Problem'
          example:
            type: 'https://www.rfc-editor.org/rfc/rfc9110.html#name-400-bad-request'
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
    Problem404NotFound:
      description: |
        The origin server did not find a current representation for the target resource.
        Problem object is based on RFC 7807 (Problem Details for HTTP APIs).
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Problem'
          example:
            type: 'https://www.rfc-editor.org/rfc/rfc9110.html#name-404-not-found'
            title: Not Found
            status: 404
            detail: The requested resource was not found.
